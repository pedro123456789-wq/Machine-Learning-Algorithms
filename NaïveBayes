import java.util.HashMap;
import java.util.LinkedList;

public class NaiveBainesClassifier {
	private int[][] data;
	private int featureNumber;
	private int dataPoints;
	private LinkedList<Integer> labels;

	public NaiveBainesClassifier(int[][] data) {
		this.data = data;
		this.featureNumber = this.data[0].length - 1;
		this.dataPoints = this.data.length;

		this.getLabels();
		this.generateTables();
	}

	private void getLabels() {
		LinkedList<Integer> labels = new LinkedList<Integer>();

		for (int i = 0; i < this.dataPoints; i++) {
			int label = this.data[i][this.featureNumber];
			if (!labels.contains(label)) {
				labels.push(label);
			}
		}

		this.labels = labels;
	}

	private void generateTables() {
		@SuppressWarnings("unchecked")
		HashMap<Integer, Double>[] tables = new HashMap[this.featureNumber];

		// initialise all table entries to zero
		for (int i = 0; i < featureNumber; i++) {
			for (Integer label : this.labels) {
				tables[i].put(label, 0.0);
			}
		}

		for (int[] dataPoint : this.data) {
			int label = dataPoint[this.featureNumber];

			for (int i = 0; i < this.featureNumber; i++) {
				double currentTotal = tables[i].get(label) * this.featureNumber;
				tables[i].put(label, (currentTotal + 1) / this.featureNumber);
			}
		}
	}
	
	
	private void getProbability(int[] dataPoint) {
		if (dataPoint.length != this.featureNumber) {
			System.out.println("The datapoint has invalid dimensions");
		}
	}
	
	public void showLabels() {
		System.out.println(this.labels);
	}

	public void main(String[] args) {
		//colour: red(0), yellow(1)
		//type: sports(0), SUV(1)
		//origin: domestic(0), imported(1)
		//stolen: yes(1), no(0)
		
		
		int[][] data = {{0, 0, 0, 1}, 
				        {0, 0, 0, 0}, 
				        {0, 0, 0, 1}, 
				        {1, 0, 0, 0}, 
				        {1, 0, 1, 1}, 
				        {1, 1, 1, 0}, 
				        {1, 1, 1, 1}, 
				        {1, 1, 0, 0}, 
				        {0, 1, 1, 0}, 
				        {0, 0, 1, 1}};
		
		NaiveBainesClassifier classifier = new NaiveBainesClassifier(data);
		classifier.showLabels();
	}
}
